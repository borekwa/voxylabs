// Generated by CoffeeScript 1.6.3
(function() {
  var AdminView, DislikedVideosView, ExperimentView, HomeView, LikedVideosView, Router, SpeakingSurveyView, UploadVideoView, Video, VideoCollection, VideoCollectionView, VideoCommentView, VideoExperimentView, VideoFeedbackView, VideoModelResultsView, VideoModelView, VideoResultsCollectionView, router, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parse.initialize("dUvUFnSWHPhwoLyhu6a4wlrsxF0Hu5JDRorzUBGC", "l5cOwMTe96qJ5VmTVjU8K9GByQ9nDUdUMj91b5PD");

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      _ref = Router.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Router.prototype.routes = {
      "": "home",
      "admin/video-upload": "uploadVideo",
      "admin/video-results": "videoResults",
      "admin/video-results/video-feedback/:id": "videoFeedback",
      "admin/dashboard": "admin",
      "videos": "videoExperiment",
      "speaking": "speakingSurvey"
    };

    Router.prototype.home = function() {
      var homeView;
      return homeView = new HomeView();
    };

    Router.prototype.uploadVideo = function() {
      var currentUser, uploadVideoView;
      currentUser = Parse.User.current();
      if (currentUser === null) {
        window.location.replace("admin-login.html");
      }
      return uploadVideoView = new UploadVideoView();
    };

    Router.prototype.videoExperiment = function() {
      var videoExperimentView;
      return videoExperimentView = new VideoExperimentView();
    };

    Router.prototype.videoResults = function() {
      var currentUser, videoResultsView;
      currentUser = Parse.User.current();
      if (currentUser === null) {
        window.location.replace("admin-login.html");
      }
      return videoResultsView = new VideoResultsCollectionView();
    };

    Router.prototype.videoFeedback = function(id) {
      var currentUser, query;
      currentUser = Parse.User.current();
      if (currentUser === null) {
        window.location.replace("admin-login.html");
      }
      query = new Parse.Query(Video);
      return query.get(id, {
        success: function(video) {
          var videoFeedbackView;
          return videoFeedbackView = new VideoFeedbackView({
            model: video
          });
        }
      });
    };

    Router.prototype.admin = function() {
      var currentUser, query;
      currentUser = Parse.User.current();
      if (currentUser === null) {
        window.location.replace("admin-login.html");
      }
      query = new Parse.Query(Video);
      return query.find({
        success: function(results) {
          var adminView, i, totalDislikes, totalLikes, video, videoDislikes, videoExperimentData, videoLikes;
          i = 0;
          totalLikes = 0;
          totalDislikes = 0;
          while (i < results.length) {
            video = results[i];
            videoLikes = video.get("likes");
            videoDislikes = video.get("dislikes");
            totalLikes += videoLikes;
            totalDislikes += videoDislikes;
            i++;
          }
          videoExperimentData = {
            totalLikes: totalLikes,
            totalDislikes: totalDislikes
          };
          return adminView = new AdminView({
            videoExperimentData: videoExperimentData
          });
        }
      });
    };

    Router.prototype.speakingSurvey = function() {
      var speakingSurveyView;
      return speakingSurveyView = new SpeakingSurveyView();
    };

    return Router;

  })(Parse.Router);

  Video = (function(_super) {
    __extends(Video, _super);

    function Video() {
      _ref1 = Video.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Video.prototype.className = "Video";

    Video.prototype.defaults = {
      "likes": 0,
      "dislikes": 0,
      "startTime": 0
    };

    Video.prototype.uploadVideo = function(video, title, description, videoUrl, startTime) {
      video.set("title", title);
      video.set("description", description);
      video.set("videoUrl", videoUrl);
      video.set("startTime", startTime);
      return video.save(null, {
        success: function(video) {
          return alert("video saved!");
        },
        error: function(video, error) {
          return alert("Error uploading the video: " + error);
        }
      });
    };

    Video.prototype.likeVideo = function() {
      this.increment("likes");
      return this.save(null, {
        success: function() {
          return console.log("+1 video like");
        },
        error: function(video, error) {
          return console.log("Error liking the video: {#error}");
        }
      });
    };

    Video.prototype.dislikeVideo = function() {
      this.increment("dislikes");
      return this.save(null, {
        success: function() {
          return console.log("+1 video dislike");
        },
        error: function(video, error) {
          return console.log("Error disliking the video: {#error}");
        }
      });
    };

    Video.prototype.submitPositiveFeedback = function(feedback) {
      this.add("positiveFeedback", feedback);
      return this.save(null, {
        success: function() {
          return console.log("positive feedback added to object");
        },
        error: function(video, error) {
          return console.log("Error submitting feedback: {#error}");
        }
      });
    };

    Video.prototype.submitNegativeFeedback = function(feedback) {
      this.add("negativeFeedback", feedback);
      return this.save(null, {
        success: function() {
          return console.log("negative feedback added to object");
        },
        error: function(video, error) {
          return console.log("Error submitting feedback: {#error}");
        }
      });
    };

    return Video;

  })(Parse.Object);

  HomeView = (function(_super) {
    __extends(HomeView, _super);

    function HomeView() {
      _ref2 = HomeView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    HomeView.prototype.el = "#container";

    HomeView.prototype.template = $("#labs-home-template").html();

    HomeView.prototype.initialize = function() {
      return this.render();
    };

    HomeView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template);
    };

    HomeView.prototype.events = {
      "click #video-lesson-experiment": "goToVideos",
      "click #speaking-survey": "goToSpeaking"
    };

    HomeView.prototype.goToVideos = function(e) {
      e.preventDefault();
      return router.navigate("videos", true);
    };

    HomeView.prototype.goToSpeaking = function(e) {
      e.preventDefault();
      return router.navigate("speaking", true);
    };

    return HomeView;

  })(Parse.View);

  AdminView = (function(_super) {
    __extends(AdminView, _super);

    function AdminView() {
      _ref3 = AdminView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    AdminView.prototype.el = "#container";

    AdminView.prototype.template = $("#labs-admin-template").html();

    AdminView.prototype.initialize = function(options) {
      this.videoExperimentData = options.videoExperimentData;
      return this.render();
    };

    AdminView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template(this.videoExperimentData));
    };

    AdminView.prototype.events = {
      "click #upload-video-link": "goToUpload",
      "click #video-experiment-widget": "goToVideoResults",
      "click #log-out": "logOut"
    };

    AdminView.prototype.goToUpload = function(e) {
      e.preventDefault();
      return router.navigate("admin/video-upload", true);
    };

    AdminView.prototype.goToVideoResults = function(e) {
      e.preventDefault();
      return router.navigate("admin/video-results", true);
    };

    AdminView.prototype.logOut = function(e) {
      e.preventDefault();
      Parse.User.logOut();
      return window.location.replace("admin-login.html");
    };

    return AdminView;

  })(Parse.View);

  UploadVideoView = (function(_super) {
    __extends(UploadVideoView, _super);

    function UploadVideoView() {
      _ref4 = UploadVideoView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    UploadVideoView.prototype.el = "#admin-body";

    UploadVideoView.prototype.template = $("#upload-video-template").html();

    UploadVideoView.prototype.initialize = function() {
      return this.render();
    };

    UploadVideoView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      this.$el.html(template());
      return $("#video-url-input").focus();
    };

    UploadVideoView.prototype.events = {
      "click #upload-video-btn": "uploadVideo",
      "keyup #video-description-input": "countDescriptionCharacters",
      "keyup #video-title-input": "countTitleCharacters"
    };

    UploadVideoView.prototype.uploadVideo = function(e) {
      var description, startTime, title, video, videoUrl;
      e.preventDefault();
      video = new Video;
      title = $("#video-title-input").val();
      description = $("#video-description-input").val();
      videoUrl = $("#video-url-input").val();
      startTime = $("#video-start-time-input").val();
      video.uploadVideo(video, title, description, videoUrl, startTime);
      return router.navigate("admin/video-upload", true);
    };

    UploadVideoView.prototype.countTitleCharacters = function(e) {
      var count, max;
      e.preventDefault();
      max = 58;
      count = $("#video-title-input").val().length;
      $("#video-title-characters").text(max - count);
      if (max - count < 0) {
        $("#video-title-characters").css({
          "color": "red"
        });
      }
      if (max - count > 0) {
        return $("#video-title-characters").css({
          "color": ""
        });
      }
    };

    UploadVideoView.prototype.countDescriptionCharacters = function(e) {
      var count, max;
      e.preventDefault();
      max = 108;
      count = $("#video-description-input").val().length;
      $("#video-description-characters").text(max - count);
      if (max - count < 0) {
        $("#video-description-characters").css({
          "color": "red"
        });
      }
      if (max - count > 0) {
        return $("#video-description-characters").css({
          "color": ""
        });
      }
    };

    return UploadVideoView;

  })(Parse.View);

  VideoCollection = (function(_super) {
    __extends(VideoCollection, _super);

    function VideoCollection() {
      _ref5 = VideoCollection.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    VideoCollection.prototype.model = Video;

    VideoCollection.prototype.sort_key = "id";

    VideoCollection.prototype.comparator = function(item) {
      return -item.get(this.sort_key);
    };

    VideoCollection.prototype.sortByField = function(fieldName) {
      this.sort_key = fieldName;
      return this.sort();
    };

    return VideoCollection;

  })(Parse.Collection);

  ExperimentView = (function(_super) {
    __extends(ExperimentView, _super);

    function ExperimentView() {
      _ref6 = ExperimentView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    ExperimentView.prototype.el = "#container";

    ExperimentView.prototype.template = $("#experiment-template").html();

    ExperimentView.prototype.initialize = function() {
      return this.render();
    };

    ExperimentView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template());
    };

    return ExperimentView;

  })(Parse.View);

  VideoExperimentView = (function(_super) {
    __extends(VideoExperimentView, _super);

    function VideoExperimentView() {
      _ref7 = VideoExperimentView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    VideoExperimentView.prototype.el = "#container";

    VideoExperimentView.prototype.headerTemplate = $("#video-header-template").html();

    VideoExperimentView.prototype.initialize = function() {
      this.render();
      this.collection = new VideoCollection;
      return this.collection.fetch({
        success: function(videoCollection) {
          var videoCollectionView;
          return videoCollectionView = new VideoCollectionView({
            collection: videoCollection
          });
        },
        error: function(videoCollection, results) {
          return console.log("error fetching the video collection");
        }
      });
    };

    VideoExperimentView.prototype.render = function() {
      var headerTemplate;
      headerTemplate = _.template(this.headerTemplate);
      return this.$el.html(headerTemplate);
    };

    return VideoExperimentView;

  })(Parse.View);

  VideoCollectionView = (function(_super) {
    __extends(VideoCollectionView, _super);

    function VideoCollectionView() {
      _ref8 = VideoCollectionView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    VideoCollectionView.prototype.el = "#container";

    VideoCollectionView.prototype.initialize = function() {
      this.collection.reset(this.collection.shuffle(), {
        silent: true
      });
      return this.render();
    };

    VideoCollectionView.prototype.render = function() {
      return this.collection.each((function(video) {
        return this.renderVideo(video);
      }), this);
    };

    VideoCollectionView.prototype.renderVideo = function(video) {
      var videoModelView;
      videoModelView = new VideoModelView({
        model: video
      });
      return this.$el.append(videoModelView.render().el);
    };

    return VideoCollectionView;

  })(Parse.View);

  VideoModelView = (function(_super) {
    __extends(VideoModelView, _super);

    function VideoModelView() {
      _ref9 = VideoModelView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    VideoModelView.prototype.template = $("#video-model-template").html();

    VideoModelView.prototype.initialize = function() {};

    VideoModelView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      this.$el.html(template(this.model.toJSON()));
      this.$(".thanks").hide();
      this.$(".positive-feedback-form").hide();
      this.$(".negative-feedback-form").hide();
      return this;
    };

    VideoModelView.prototype.events = {
      "click .thumbs-up": "like",
      "click .thumbs-down": "dislike",
      "click .positive-feedback-submit": "submitPositiveFeedback",
      "click .negative-feedback-submit": "submitNegativeFeedback"
    };

    VideoModelView.prototype.like = function() {
      this.model.likeVideo();
      this.$(".like-dislike").hide();
      this.$(".positive-feedback-form").show();
      return this.$(".feedback-form").focus();
    };

    VideoModelView.prototype.dislike = function() {
      this.model.dislikeVideo();
      this.$(".like-dislike").hide();
      this.$(".negative-feedback-form").show();
      return this.$(".feedback-form").focus();
    };

    VideoModelView.prototype.submitPositiveFeedback = function() {
      var feedback;
      feedback = this.$(".positive-feedback-input").val();
      this.model.submitPositiveFeedback(feedback);
      this.$(".positive-feedback-form").hide();
      return this.$(".thanks").show();
    };

    VideoModelView.prototype.submitNegativeFeedback = function() {
      var feedback;
      feedback = this.$(".negative-feedback-input").val();
      this.model.submitNegativeFeedback(feedback);
      this.$(".negative-feedback-form").hide();
      return this.$(".thanks").show();
    };

    return VideoModelView;

  })(Parse.View);

  VideoResultsCollectionView = (function(_super) {
    __extends(VideoResultsCollectionView, _super);

    function VideoResultsCollectionView() {
      _ref10 = VideoResultsCollectionView.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    VideoResultsCollectionView.prototype.el = "#admin-body";

    VideoResultsCollectionView.prototype.template = $("#video-results-template").html();

    VideoResultsCollectionView.prototype.initialize = function() {
      this.render();
      this.collection = new VideoCollection;
      return this.collection.fetch({
        success: function(videoCollection) {
          var dislikedVideosView, likedVideosView;
          videoCollection.sortByField("likes");
          likedVideosView = new LikedVideosView({
            likedVideosCollection: videoCollection
          });
          videoCollection.sortByField("dislikes");
          return dislikedVideosView = new DislikedVideosView({
            dislikedVideosCollection: videoCollection
          });
        }
      });
    };

    VideoResultsCollectionView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template());
    };

    return VideoResultsCollectionView;

  })(Parse.View);

  LikedVideosView = (function(_super) {
    __extends(LikedVideosView, _super);

    function LikedVideosView() {
      _ref11 = LikedVideosView.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    LikedVideosView.prototype.el = "#most-liked-videos";

    LikedVideosView.prototype.initialize = function(options) {
      this.likedVideosCollection = options.likedVideosCollection;
      return this.render();
    };

    LikedVideosView.prototype.render = function() {
      return this.likedVideosCollection.each((function(video) {
        return this.renderVideoResults(video);
      }), this);
    };

    LikedVideosView.prototype.renderVideoResults = function(video) {
      var videoModelResultsView;
      videoModelResultsView = new VideoModelResultsView({
        model: video
      });
      return this.$el.append(videoModelResultsView.render());
    };

    return LikedVideosView;

  })(Parse.View);

  DislikedVideosView = (function(_super) {
    __extends(DislikedVideosView, _super);

    function DislikedVideosView() {
      _ref12 = DislikedVideosView.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    DislikedVideosView.prototype.el = "#least-liked-videos";

    DislikedVideosView.prototype.initialize = function(options) {
      this.dislikedVideosCollection = options.dislikedVideosCollection;
      return this.render();
    };

    DislikedVideosView.prototype.render = function() {
      return this.dislikedVideosCollection.each((function(video) {
        return this.renderVideoResults(video);
      }), this);
    };

    DislikedVideosView.prototype.renderVideoResults = function(video) {
      var videoModelResultsView;
      videoModelResultsView = new VideoModelResultsView({
        model: video
      });
      return this.$el.append(videoModelResultsView.render());
    };

    return DislikedVideosView;

  })(Parse.View);

  VideoModelResultsView = (function(_super) {
    __extends(VideoModelResultsView, _super);

    function VideoModelResultsView() {
      _ref13 = VideoModelResultsView.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    VideoModelResultsView.prototype.template = $("#video-model-results-template").html();

    VideoModelResultsView.prototype.initialize = function() {};

    VideoModelResultsView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template(this.model.toJSON()));
    };

    VideoModelResultsView.prototype.events = {
      "click .widget": "goToVideoFeedback"
    };

    VideoModelResultsView.prototype.goToVideoFeedback = function(e) {
      var id;
      e.preventDefault();
      id = this.model.id;
      return router.navigate("admin/video-results/video-feedback/" + id, true);
    };

    return VideoModelResultsView;

  })(Parse.View);

  VideoFeedbackView = (function(_super) {
    __extends(VideoFeedbackView, _super);

    function VideoFeedbackView() {
      _ref14 = VideoFeedbackView.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    VideoFeedbackView.prototype.el = "#admin-body";

    VideoFeedbackView.prototype.template = $("#video-feedback-template").html();

    VideoFeedbackView.prototype.initialize = function() {
      var comment, comments, i, negativeFeedback, positiveFeedback, videoCommentView;
      this.render();
      negativeFeedback = this.model.get("negativeFeedback");
      positiveFeedback = this.model.get("positiveFeedback");
      comments = _.union(negativeFeedback, positiveFeedback);
      i = 0;
      while (i < comments.length) {
        comment = comments[i];
        videoCommentView = new VideoCommentView({
          comment: comment
        });
        videoCommentView.render();
        i++;
      }
      return this;
    };

    VideoFeedbackView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template(this.model.toJSON()));
    };

    VideoFeedbackView.prototype.renderComment = function(comment) {
      var videoCommentView;
      videoCommentView = new VideoCommentView({
        comment: comment
      });
      return videoCommentView.render();
    };

    return VideoFeedbackView;

  })(Parse.View);

  VideoCommentView = (function(_super) {
    __extends(VideoCommentView, _super);

    function VideoCommentView() {
      _ref15 = VideoCommentView.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    VideoCommentView.prototype.el = "#video-feedback-container";

    VideoCommentView.prototype.template = $("#video-comment-template").html();

    VideoCommentView.prototype.initialize = function(options) {
      return this.comment = options.comment;
    };

    VideoCommentView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.append(template({
        "comment": this.comment
      }));
    };

    return VideoCommentView;

  })(Parse.View);

  SpeakingSurveyView = (function(_super) {
    __extends(SpeakingSurveyView, _super);

    function SpeakingSurveyView() {
      _ref16 = SpeakingSurveyView.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    SpeakingSurveyView.prototype.el = $("#container");

    SpeakingSurveyView.prototype.template = $("#speaking-survey-template").html();

    SpeakingSurveyView.prototype.initialize = function() {
      return this.render();
    };

    SpeakingSurveyView.prototype.render = function() {
      var template;
      template = _.template(this.template);
      return this.$el.html(template);
    };

    SpeakingSurveyView.prototype.events = function() {
      return {
        "change input": "changeRadio"
      };
    };

    SpeakingSurveyView.prototype.changeRadio = function(e) {
      e.preventDefault();
      return $(e.target).parent.addClass("bright-purple");
    };

    return SpeakingSurveyView;

  })(Parse.View);

  router = new Router;

  Parse.history.start();

}).call(this);
